Firebrick
---

Software for the open source hardware write-blocker/imager.

FIREBrick features:
*Autonomous disk imaging at speeds of up to 5Gb per minute (disk dependent)
*FireWire write blocker function
*Stand-alone version supports storage mirroring and encryption
*Portable – fits in a small HTPC case, including display
*Free, open source firmware
*Can be fully customized to the needs of specific departments
*Adheres to NIST Computer Forensic Tool Testing protocols
*Automatic RAID storage detection

To build a FIREBrick you need:

*ASRock E350M1 Motherboard
*1Gb DDR3 Desktop RAM (1333 or 1066)
*Dynamode PCIX3FW 3-Port Firewire PCIe
*An LCD2USB 20×4 display. You can buy it from Lcdmodkit or you can make one yourself.

Note: If you want to use RAID storage, you will also need two equal-sized HDDs. 

For more info visit http://digitalfire.ucd.ie/?page_id=1011

Lee Tobin - leetobin@gmail.com

Address 
Room A1.10
UCD School of Computer Science
University College Dublin
Belfield, Dublin 4, Ireland

dfire@ucd.ie
@dfirelabs

To get developing:
---
Firstly, you'll need a dev environment. Any linux distro with a good set of build tools will do (make, gcc, g++, etc...).

Clone the repo
	git clone https://github.com/leetobin/firebrick.git 
	(this should create a "firebrick" directory containing the source files)

Build buildroot et al.
	cd firebrick/buildroot
	make (and wait about 25mins)

Build coreboot with the firebrick kernel+initfs as payload
	cd (../../)firebrick/coreboot
	make (and wait about 5mins)
	
Make an ELF payload from the Kernel+Filesystem
	cd (../../)extraFiles
	./mkelfImage --append="console=ttyS0,115200" ../buildroot/output/images/bzImage ../linux.elf

Then you can flash your new coreboot BIOS file into your ASRock motherboard

Alternatively, you could just flash the ROM file that's in this repository  (firebrick/coreboot/build/coreboot.com) to the motherboard.

To flash the ROM into your BIOS:
---

The safest way, and what we recommend to do, is to build a little ROM flasher from an arduino nano (or arduino nano clone).

Good instructions can be found here:
http://www.flashrom.org/Serprog/Arduino_flasher#Improved_3.3v_version_by_Simon_Inns_.28no_issue_anymore_with_laptop_chips.29

We used an arduino nano clone (Meduino Nano 3.3v <-> 5v selectable version), and flashed the ROM via a small breadboard circuit. This way, if your flashing fails you can always recover. It's also great if you are developing as you can try things that might break the ROM and know you can recover.

However, you can create a bootable USB device with the FIREBrick OS on it. That way you can use it to flash your BIOS.

1. Create a bootable USB.
Syslinux works well for this:
http://www.syslinux.org/wiki/index.php/The_Syslinux_Project

Install syslinux to your key and create a simple config file like this one:
	SYSLINUX.CFG:
		default firebrick

		label firebrick
			linux /bzImage

2. Copy the bzImage and coreboot.rom files from the repo to your USB key.
https://github.com/leetobin/firebrick/blob/master/coreboot/build/coreboot.rom
https://github.com/leetobin/firebrick/blob/master/buildroot/output/images/bzImage

3. Boot into the FIREBrick OS.
4. Flash the BIOS using flashrom ( flashrom -p internal -w coreboot.rom )

It's probably a good idea to save a copy of the stock BIOS ( flashrom -p internal -r stock.rom )

Discalimer:
--
This system is in development, any loss of data/evidence or any related problems are not the fault of this project or DigialFIRE. We're confident in this project, but we're only human. Also, we're adding functionality to the FIREBrick all the time, so again, test your FIREBrick lots (particularly if you've developed new functionality).